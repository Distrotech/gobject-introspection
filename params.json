{"name":"Gobject-introspection","tagline":"Mirror of git://git.gnome.org/gobject-introspection","body":"GObject Introspection\r\n=====================\r\nThe goal of the project is to describe the APIs and  collect them in\r\na uniform, machine readable format.\r\n\r\nGIR XML format\r\n==============\r\n\r\nThere's an XML format called GIR used by GObjectIntrospection.\r\nThe purpose of it is to provide a common structure to access the complete\r\navailable API that a library or other unit of code exports.\r\nIt is meant to be language agnostic using namespaces to separate\r\ncore, language or library specific functionality.\r\nThere are currently only C based tools that work on the format, but it's\r\nmeant to be usable to use in other situations, for instance to/from another\r\nset of languages.\r\n\r\nTypelib\r\n=======\r\n\r\nThe typelib is a to disk version of the GIR designed to be fast, memory\r\nefficient and complete enough so that language bindings can be written\r\non top of it without other sources of information.\r\nIt is normally compiled from a GIR when a library/program is installed and\r\naccessed from the language binding or another application who wishes to\r\nuse the information.\r\n\r\nTools\r\n=====\r\n\r\nThree tools are shipped with GObject Introspection:\r\n- g-ir-compile, a typelib compiler. It converts one or more GIR files\r\n  into one or more typelib blobs. It can either emit the raw typelib\r\n  blob or C code (--code).\r\n- g-ir-generate, an GIR generator, using the repository API. It generates\r\n  GIR files from binary typelib which can be in a shared object, or a raw\r\n  typelib blob.\r\n- g-ir-scanner, a tool which generates GIR XML files by parsing headers\r\n  and introspecting GObject based libraries.\r\n- g-ir-doc-tool, generates Mallard files that can be viewed with yelp or\r\n  rendered to HTML with yelp-build from yelp-tools.\r\n\r\nAPI library\r\n===========\r\n\r\nThere's also a C based library called libgirepository which provides\r\nan API to access to the typelib metadata. It also contains an API to\r\ninvoke functions, given the function info object. The implementation is\r\nbased on libffi (3.0 or higher of libffi required, can be found at\r\nhttp://sourceware.org/libffi).\r\n\r\nThere are a number of GIR test files in tests/, and a script to do\r\nroundtrip tests (GIR -> typelib -> GIR).\r\n\r\nHelping out\r\n===========\r\nThe introspection framework needs a lot more work, see TODO.\r\n\r\nHomepage\r\n========\r\nhttp://live.gnome.org/GObjectIntrospection\r\n\r\nReporting bugs\r\n==============\r\nBugs should be reported in http://bugzilla.gnome.org/, the glib product and\r\nthe introspection component.\r\n\r\nContact\r\n=======\r\nMail: gtk-devel-list@gnome.org\r\nIRC: #introspection@irc.gnome.org\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}